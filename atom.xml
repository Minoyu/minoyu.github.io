<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小余有个大梦想</title>
  <icon>https://www.gravatar.com/avatar/a291781eeb8444a1250c980a03013d59</icon>
  <subtitle>我的学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://minoyu.github.io/"/>
  <updated>2019-05-26T17:28:17.102Z</updated>
  <id>https://minoyu.github.io/</id>
  
  <author>
    <name>Minoyu</name>
    <email>yu-letao@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SemVer? 起版本号当然要讲些规矩</title>
    <link href="https://minoyu.github.io/2019/05/26/whySemver%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>https://minoyu.github.io/2019/05/26/whySemver版本号/</id>
    <published>2019-05-26T14:12:11.000Z</published>
    <updated>2019-05-26T17:28:17.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SemVer？"><a href="#什么是SemVer？" class="headerlink" title="什么是SemVer？"></a>什么是SemVer？</h2><p>最近吴大佬的科普下， 简单了解了一些SemVer语义化版本号的规范， 准备在这里记录和总结一些自己的想法。 </p><p>首先， 我们来看一下前端React框架最近发布的版本号的命名。 </p><ul><li>v16.9.0-alpha.0</li><li>v16.8.6</li><li>v16.8.5</li><li>v16.8.4</li><li>v16.8.3</li><li>v16.8.2</li><li>v16.8.1</li><li>v16.8.0</li><li>v16.8.0-alpha.1</li><li>v16.7.0</li></ul><p>可以看出 React 发布的版本是非常的清晰和规范的, 这就归功于Semver(语义化的版本)规范的功劳, 从中咱们不难可以总结出一些规律。 </p><ol><li>软件的版本通常由三位组成， 形如： X. Y. Z， 依照Semver规范， 版本格式： 主版本号. 次版本号. 修订号， 版本号递增规则如下： </li></ol><blockquote><ul><li>主版本号： 当你做了不兼容的 API 修改</li><li>次版本号： 当你做了向下兼容的功能性新增 </li><li>修订号： 当你做了向下兼容的问题修正。 </li></ul></blockquote><ol start="2"><li><p>版本是严格递增的， 例如React此处是： 16.8.5 -&gt; 16.8.6-&gt; 16.9.0</p></li><li><p>在发布重要版本时， 可以发布alpha、 rc等先行版本</p></li></ol><blockquote><p>先行版本号及版本编译元数据可以加到“主版本号. 次版本号. 修订号”的后面， 作为延伸。 </p></blockquote><p>以上的三点基本可以概括Semver规范所要求的版本号格式了， 具体的一些细则可以参考 <a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">https://semver.org/lang/zh-CN/</a></p><h2 id="版本号而已为啥会有Semver？"><a href="#版本号而已为啥会有Semver？" class="headerlink" title="版本号而已为啥会有Semver？"></a>版本号而已为啥会有Semver？</h2><p>在我的理解中， SemVer就是一套规定了版本号应该如何去表示， 如何增加， 如何进行比较， 不同的版本号意味着什么的规范。 </p><p>也许在我们以往的认识中， 版本号是一个很随意的存在， 而判断它需不需要进位的依据仅仅是”我觉得差不多可以了改个版本了“。 </p><p>然而当我们的项目变得庞大起来时， 往往需要分包或者依赖于一些其他的软件包。 软件包是会不断更新和变化的， 这时就存在了不同软件包版本之间的依赖关系， 一旦管理不慎， 很容易出现有一些bug的情况， 例如A包需要依赖B包的一个新功能， 但当前的B包过久无法提供， 软件包之间无法完成相互的依赖。 </p><p>如今的前端项目， 打开我们的 <code>package.json</code> 文件， 我们甚至能找到几十个甚至上百个依赖的包。 而这很可能只是冰山一角， 还有许许多多依赖的依赖包。 于是忽， 如何更好的管理和规范这些包的版本， 让其统一便于理解和使用成为了一个问题。 </p><p>因此， Github 起草了一个具有指导意义的， 统一的版本号表示规则， 称为 Semantic Versioning(语义化版本表示)。 </p><h2 id="有啥好处举个栗子？"><a href="#有啥好处举个栗子？" class="headerlink" title="有啥好处举个栗子？"></a>有啥好处举个栗子？</h2><p>讲了很多大道理，不如我们举个例子来看看语义化后的版本如何让依赖地狱成为过去2333～。 </p><ul><li>首先， 我们假设有位 <code>”消防员“</code> ， 他参与救火任务时需要依赖 <code>”梯子“</code> 去攀爬。 </li><li><code>消防员</code> 平时训练时要使用”梯子”第三代第一版时新增的功能( <code>消防员</code> 依赖于 <code>梯子 v3.1.0</code> )</li><li>于是， 在日后的救火任务中 <code>消防员</code> 可以放心的去使用版本号大等于 <code>v3.1.0</code> 但小于 <code>v4.0.0</code> 的梯子(出现不可兼容更新， 主版本号递增， 无法保证原有的功能特性可以兼容)</li><li>同时， 当有&gt;= <code>3.1.1</code> ~&lt; <code>3.2.0</code> 版本的 <code>梯子</code> 发布时， <code>消防员</code> 可以毫无顾虑， 无需学习就可使用， 因为这些梯子只是原有基础上的一些小修整(修订号更新无新功能添加， 仅为bugfix)</li></ul><p>哈哈哈， 上面这个例子应该可以很好理解了吧。 由此可以看出， SemVer大大的规范了软件包之间的版本发布， 你甚至不用去了解更新的具体内容， 就可以决定是否需要更新到特定版本的软件包。 </p><h2 id="在package-json中的运用-x"><a href="#在package-json中的运用-x" class="headerlink" title="在package.json中的运用( ^~*x )"></a>在package.json中的运用( <code>^~*x</code> )</h2><p>当执行 <code>npm install package -S</code> 或 <code>yarn add</code> 来安装三方包时， 包管理器会首先安装包的最新版本， 然后将包名及版本号写入到 package.json 文件中。 </p><p>我们可以对依赖包的版本号做一些修改来限定依赖包的版本范围。 例如:</p><ul><li>兼容模块新发布的修订补丁版本： ~16.2.0、 16.2.x、 16.2， 只有修订版本的更新会被匹配。 </li><li>兼容模块新发布的小版本、 修订补丁版本： ^16.2.0、 16.x、 16， 小版本及修订版本的更新会被匹配。 </li><li>兼容模块新发布的大版本、 小版本、 修订补丁版本： *、 x， 所有的版本都会被比配。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SemVer？&quot;&gt;&lt;a href=&quot;#什么是SemVer？&quot; class=&quot;headerlink&quot; title=&quot;什么是SemVer？&quot;&gt;&lt;/a&gt;什么是SemVer？&lt;/h2&gt;&lt;p&gt;最近吴大佬的科普下， 简单了解了一些SemVer语义化版本号的规范， 准备在
      
    
    </summary>
    
      <category term="开发杂记" scheme="https://minoyu.github.io/categories/%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="开发杂记" scheme="https://minoyu.github.io/tags/%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World! My first hexo post! (hexo的常用命令及优化)</title>
    <link href="https://minoyu.github.io/2018/10/18/hello-world/"/>
    <id>https://minoyu.github.io/2018/10/18/hello-world/</id>
    <published>2018-10-18T09:02:06.000Z</published>
    <updated>2019-01-24T13:04:09.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于这里"><a href="#关于这里" class="headerlink" title="关于这里"></a>关于这里</h1><p>哈哈哈，第一次尝试用Hexo来搭建一个博客，放在github page上，尝试了一下。<strong>以后这里主要用来记录我的学习笔记和一些探索总结吧</strong>。</p><p>话说觉得Hexo真的好神奇，脱离了数据库，用一个个md文档充当文章的内容，在本地写好md文档后编译成Html,再推上服务器。实现了纯静态的访问，蛮有意思的XD</p><h3 id="那就这样吧，接下来开始我的记录咯。"><a href="#那就这样吧，接下来开始我的记录咯。" class="headerlink" title="那就这样吧，接下来开始我的记录咯。"></a>那就这样吧，接下来开始我的记录咯。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My First Note！"</span></span><br></pre></td></tr></table></figure><p>个人博客: <a href="https://we.sharelove.site/" target="_blank" rel="noopener">我们的小确幸</a></p><h1 id="hexo的常用命令"><a href="#hexo的常用命令" class="headerlink" title="hexo的常用命令"></a>hexo的常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文章</span></span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo g</span><br><span class="line"><span class="comment"># 部署网站</span></span><br><span class="line">$ hexo d</span><br><span class="line"><span class="comment"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span></span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h1 id="hexo的优化"><a href="#hexo的优化" class="headerlink" title="hexo的优化"></a>hexo的优化</h1><p>虽然hexo已经很优秀了，但考虑到毕竟是放在github page上的，还是稍微做一些优化。</p><h2 id="静态资源优化"><a href="#静态资源优化" class="headerlink" title="静态资源优化"></a>静态资源优化</h2><p>主要是压缩html,css,js等等静态资源，可以适当减少请求的数据量，主要用到gulp来实现。</p><ol><li>安装gulp</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装gulp工具 以yarn工具为例</span></span><br><span class="line">$ yarn global add gulp-cli</span><br><span class="line"><span class="comment"># 给项目安装各种gulp插件 分别负责压缩html 图片 css js</span></span><br><span class="line">$ yarn add gulp gulp-htmlclean gulp-htmlmin gulp-imagemin gulp-minify-css gulp-uglify</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><p>在根目录下添加<code>gulpfile.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            compatibility: <span class="string">'ie8'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/js/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/img/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">        [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.jpegtran(&#123;<span class="string">'progressive'</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.svgo()],</span><br><span class="line">        &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/img'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task('default', [</span></span><br><span class="line">  <span class="comment">//  'minify-html', 'minify-css', 'minify-js'，'minify-images'</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务 gulp4以上写法 gulp.parallel 任务同时进行</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.parallel(</span><br><span class="line">    <span class="string">'minify-html'</span>,</span><br><span class="line">    <span class="string">'minify-css'</span>,</span><br><span class="line">    <span class="string">'minify-js'</span>,</span><br><span class="line">    <span class="string">'minify-images'</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><ol start="3"><li>在hexo g生成文件后运行gulp<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ gulp</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li></ol><h2 id="生成sitemap文件"><a href="#生成sitemap文件" class="headerlink" title="生成sitemap文件"></a>生成sitemap文件</h2><p>生成sitemap文件然后提交给搜索引擎，对于SEO很有帮助，hexo有相关的sitemap插件。</p><p>安装这俩插件后，以后每次hexo g都会生成sitemap.xml和baidusitemap.xml文件并自动帮你放到public目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-generator-sitemap hexo-generator-baidu-sitemap</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于这里&quot;&gt;&lt;a href=&quot;#关于这里&quot; class=&quot;headerlink&quot; title=&quot;关于这里&quot;&gt;&lt;/a&gt;关于这里&lt;/h1&gt;&lt;p&gt;哈哈哈，第一次尝试用Hexo来搭建一个博客，放在github page上，尝试了一下。&lt;strong&gt;以后这里主要用来记录我
      
    
    </summary>
    
      <category term="奇怪的东西" scheme="https://minoyu.github.io/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    
    
      <category term="杂类" scheme="https://minoyu.github.io/tags/%E6%9D%82%E7%B1%BB/"/>
    
      <category term="Hello world" scheme="https://minoyu.github.io/tags/Hello-world/"/>
    
  </entry>
  
</feed>
